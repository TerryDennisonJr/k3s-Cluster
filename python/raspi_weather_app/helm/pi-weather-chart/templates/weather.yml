apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: raspi-weather
  name: raspi-weather
  # namespace: staging  
spec:
  replicas: 1
  selector:
    matchLabels:
      app: raspi-weather
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: raspi-weather
    spec:
      containers:
      - image: {{ .Values.weather_app.image}}
        imagePullPolicy: IfNotPresent
        name: raspiweather
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: {{ .Values.mysql.rootPassword}}          
        - name: MYSQL_HOST
          value: {{ .Values.mysql.host}}
        - name: MYSQL_DATABASE
          value: {{ .Values.mysql.database}}           
        - name: MYSQL_USER
          value: {{ .Values.mysql.user}}
        - name: MYSQL_PASSWORD
          value: {{ .Values.mysql.password}}                           
        volumeMounts:
        - name: host-volume
          mountPath: /mnt/host-data          
        resources: {}
        securityContext:
          privileged: true
      volumes:
      - name: host-volume
        hostPath:
          path: /home/raspiNode/mydata/weather_app
          type: DirectoryOrCreate    
      nodeSelector:
        deployment_node: weather_app 
      restartPolicy: Always  
status: {}

# apiVersion: batch/v1
# kind: CronJob
# metadata:
#   creationTimestamp: null
#   name: raspi-weather
# spec:
#   jobTemplate:
#     metadata:
#       creationTimestamp: null
#       name: raspi-weather
#     spec:
#       template:
#         metadata:
#           creationTimestamp: null
#         spec:
#           containers:
#           - image: {{ .Values.weather_app.image}}
#             imagePullPolicy: IfNotPresent
#             env:
#             - name: MYSQL_HOST
#               value: {{ .Values.mysql.host}}
#             - name: MYSQL_ROOT_PASSWORD
#               value: {{ .Values.mysql.rootPassword}}                                      
#             name: raspiweather
#             resources: {}
#             securityContext:
#               privileged: true            
#           nodeSelector:
#             deployment_node: weather_app
#           restartPolicy: OnFailure
#   schedule: 0/1 * * * ?
#   successfulJobsHistoryLimit: 1
# status: {}

